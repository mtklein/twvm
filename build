#!/usr/bin/env python3

import os
import subprocess
import sys

with open('build.ninja', 'w') as b:
    b.write('''
builddir = out

clang = clang -Weverything -Wno-poison-system-directories -Wno-declaration-after-statement

rule compile
  command = $cc -g -Werror -fdiagnostics-color -MD -MF $out.d -c $in -o $out
  depfile = $out.d
  deps    = gcc

rule archive
  command = zig ar rcs $out $in

rule link
  command = $cc -Wl,-dead_strip $in -o $out

rule run
  command = $runtime ./$in > $out
''')

    modes = {
        'dbg':  ('$clang -fsanitize=address,integer,undefined -fno-sanitize-recover=all', ''),
        'opt':  ('$clang -Os -DNDEBUG', ''),
        'gcc':  ('gcc-13 -O1 -Wall -Wextra', ''),
        'wasm': ('zig cc -Os -target wasm32-wasi', 'wasmer'),
    }
    srcs = subprocess.check_output(['git', 'ls-files', '*.c']).decode().split()
    main = subprocess.check_output(['git', 'grep', '-l', 'main('] + srcs).decode().split()
    rest = [src for src in srcs if src not in main]

    for mode,(cc,runtime) in modes.items():
        def target(src):
            return os.path.join('out', mode, os.path.splitext(src)[0])
        for src in srcs:
            b.write(f'build {target(src)}.o: compile {src}\n  cc={cc}\n')
        b.write(f'build {target("lib")}.a: archive {" ".join(target(src)+".o" for src in rest)}\n')
        for src in main:
            b.write(f'build {target(src)}: link {target(src)}.o {target("lib")}.a\n  cc={cc}\n')
            if 'test' in src:
                b.write(f'build {target(src)}.ok: run {target(src)}\n  runtime={runtime}\n')

rc = subprocess.call(['ninja'] + sys.argv[1:])
if rc == 0:
    os.remove('build.ninja')
    subprocess.call(['git', 'add', '-u'])
sys.exit(rc)
